{"version":3,"file":"js/848.0fd29355.js","mappings":"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","sources":["webpack://fifth-grade-app/./src/components/FifthGradeComponents/GeometryExplorer.vue","webpack://fifth-grade-app/./src/components/FifthGradeComponents/GeometryExplorer.vue?0231"],"sourcesContent":["<!-- src/components/FifthGrade/GeometryExploere.vue -->\r\n<template>\r\n  <div class=\"geometry-explorer\">\r\n    <h2>Geometry Explorer üßÆ</h2>\r\n\r\n    <!-- TEACH STEP -->\r\n    <section v-if=\"step === 'teach'\" class=\"card\">\r\n      <h3>{{ shape.name }}</h3>\r\n      <div class=\"diagram\" v-html=\"shapeDiagram\"></div>\r\n\r\n      <div class=\"explain\">\r\n        <p class=\"what\">\r\n          <strong>What is it?</strong>\r\n          {{ shape.description }}\r\n        </p>\r\n\r\n        <div class=\"formulas\">\r\n          <p>\r\n            <strong>Perimeter:</strong>\r\n            {{ shape.perimeter }}\r\n          </p>\r\n          <p v-if=\"shape.area\">\r\n            <strong>Area:</strong>\r\n            {{ shape.area }}\r\n          </p>\r\n        </div>\r\n\r\n        <div class=\"examples\">\r\n          <p><strong>Real-life examples:</strong></p>\r\n          <ul>\r\n            <li v-for=\"(ex, i) in shape.examples\" :key=\"i\">‚Ä¢ {{ ex }}</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n\r\n      <button class=\"btn primary\" @click=\"goToQuestion\">\r\n        I'm Ready for a Question!\r\n      </button>\r\n    </section>\r\n\r\n    <!-- QUESTION STEP -->\r\n    <section v-else-if=\"step === 'question'\" class=\"card\">\r\n      <h3>Question Time üéØ</h3>\r\n      <div class=\"diagram\" v-html=\"questionDiagram\"></div>\r\n      <p class=\"q-text\">{{ question.prompt }}</p>\r\n\r\n      <div class=\"answer-row\">\r\n        <input\r\n          v-model=\"answer\"\r\n          type=\"number\"\r\n          step=\"any\"\r\n          class=\"answer-input\"\r\n          :placeholder=\"question.placeholder || 'Your answer'\"\r\n          @keyup.enter=\"checkAnswer\"\r\n        />\r\n        <span v-if=\"question.unit\" class=\"unit\">{{ question.unit }}</span>\r\n      </div>\r\n\r\n      <div class=\"actions\">\r\n        <button class=\"btn\" @click=\"checkAnswer\">Check Answer</button>\r\n        <button class=\"btn ghost\" @click=\"tryAnother\">Try Another</button>\r\n      </div>\r\n\r\n      <p v-if=\"feedback\" :class=\"['feedback', isCorrect ? 'ok' : 'bad']\">\r\n        {{ feedback }}\r\n      </p>\r\n\r\n      <div v-if=\"isCorrect\" class=\"next-wrap\">\r\n        <button class=\"btn primary\" @click=\"nextShape\">Next Shape ‚û°Ô∏è</button>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- DONE (loops back) -->\r\n    <section v-else class=\"card\">\r\n      <p>Awesome work! You finished all shapes. Want to start over?</p>\r\n      <button class=\"btn primary\" @click=\"restart\">Start Again üîÅ</button>\r\n    </section>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  export default {\r\n    name: 'GeometryExploere',\r\n    data() {\r\n      return {\r\n        index: 0,\r\n        step: 'teach', // 'teach' | 'question' | 'done'\r\n        answer: '',\r\n        feedback: '',\r\n        isCorrect: false,\r\n        question: {\r\n          prompt: '',\r\n          unit: '',\r\n          value: null,\r\n          placeholder: '',\r\n          meta: {}, // holds dims used for diagram rendering\r\n        },\r\n        shapes: [\r\n          {\r\n            key: 'square',\r\n            name: 'Square',\r\n            description: 'A polygon with 4 equal sides and 4 right angles.',\r\n            perimeter: 'P = 4 √ó side',\r\n            area: 'A = side √ó side',\r\n            examples: ['Chessboard tile', 'Bathroom floor tile', 'Window pane'],\r\n            diagram: ({ s = 80 } = {}) =>\r\n              `<svg viewBox=\"0 0 160 160\" width=\"200\" height=\"200\">\r\n              <rect x=\"40\" y=\"40\" width=\"${s}\" height=\"${s}\" fill=\"#c9f3ec\" stroke=\"#111\" stroke-width=\"3\"/>\r\n            </svg>`,\r\n            makeQuestion: () => {\r\n              const side = Math.floor(Math.random() * 8) + 3 // 3..10\r\n              const askPerimeter = Math.random() < 0.5\r\n              return askPerimeter\r\n                ? {\r\n                    prompt: `A square tile has each side = ${side} cm. What is its perimeter?`,\r\n                    unit: 'cm',\r\n                    value: 4 * side,\r\n                    placeholder: 'Perimeter',\r\n                    meta: { side },\r\n                  }\r\n                : {\r\n                    prompt: `A square garden has each side = ${side} m. What is its area?`,\r\n                    unit: 'm¬≤',\r\n                    value: side * side,\r\n                    placeholder: 'Area',\r\n                    meta: { side },\r\n                  }\r\n            },\r\n            questionDiagram: (meta) =>\r\n              `<svg viewBox=\"0 0 200 200\" width=\"220\" height=\"220\">\r\n              <rect x=\"40\" y=\"40\" width=\"120\" height=\"120\" fill=\"#c9f3ec\" stroke=\"#111\" stroke-width=\"3\"/>\r\n              <text x=\"100\" y=\"110\" text-anchor=\"middle\" font-size=\"16\" fill=\"#111\">side = ${meta.side}</text>\r\n            </svg>`,\r\n          },\r\n          {\r\n            key: 'rectangle',\r\n            name: 'Rectangle',\r\n            description:\r\n              'Opposite sides are equal; all angles are right angles.',\r\n            perimeter: 'P = 2 √ó (length + width)',\r\n            area: 'A = length √ó width',\r\n            examples: ['Door', 'Notebook cover', 'TV screen'],\r\n            diagram: ({ w = 120, h = 80 } = {}) =>\r\n              `<svg viewBox=\"0 0 220 160\" width=\"240\" height=\"180\">\r\n              <rect x=\"40\" y=\"40\" width=\"${w}\" height=\"${h}\" fill=\"#d8f8dc\" stroke=\"#111\" stroke-width=\"3\"/>\r\n            </svg>`,\r\n            makeQuestion: () => {\r\n              const L = Math.floor(Math.random() * 10) + 6 // 6..15\r\n              const W = Math.floor(Math.random() * 7) + 3 // 3..9\r\n              const askArea = Math.random() < 0.6\r\n              return askArea\r\n                ? {\r\n                    prompt: `A book is ${L} cm long and ${W} cm wide. What is its area?`,\r\n                    unit: 'cm¬≤',\r\n                    value: L * W,\r\n                    placeholder: 'Area',\r\n                    meta: { L, W },\r\n                  }\r\n                : {\r\n                    prompt: `A door is ${L} m tall and ${W} m wide. What is its perimeter?`,\r\n                    unit: 'm',\r\n                    value: 2 * (L + W),\r\n                    placeholder: 'Perimeter',\r\n                    meta: { L, W },\r\n                  }\r\n            },\r\n            questionDiagram: (meta) =>\r\n              `<svg viewBox=\"0 0 260 200\" width=\"260\" height=\"200\">\r\n              <rect x=\"50\" y=\"40\" width=\"160\" height=\"100\" fill=\"#d8f8dc\" stroke=\"#111\" stroke-width=\"3\"/>\r\n              <text x=\"130\" y=\"30\" text-anchor=\"middle\" font-size=\"14\" fill=\"#111\">length = ${meta.L}</text>\r\n              <text x=\"20\" y=\"95\" text-anchor=\"middle\" font-size=\"14\" fill=\"#111\" transform=\"rotate(-90,20,95)\">width = ${meta.W}</text>\r\n            </svg>`,\r\n          },\r\n          {\r\n            key: 'triangle',\r\n            name: 'Right Triangle',\r\n            description:\r\n              'A triangle with one 90¬∞ angle. Area uses base and height.',\r\n            perimeter: 'P = a + b + c (sum of all sides)',\r\n            area: 'A = ¬Ω √ó base √ó height',\r\n            examples: [\r\n              'Yield road sign (triangular)',\r\n              'Tent flap',\r\n              'Pizza slice',\r\n            ],\r\n            diagram: ({ b = 120, h = 90 } = {}) =>\r\n              `<svg viewBox=\"0 0 200 160\" width=\"220\" height=\"180\">\r\n              <polygon points=\"40,140 160,140 40,50\" fill=\"#fbe0e6\" stroke=\"#111\" stroke-width=\"3\"/>\r\n              <line x1=\"40\" y1=\"140\" x2=\"40\" y2=\"50\" stroke=\"#111\" stroke-width=\"3\"/>\r\n              <rect x=\"40\" y=\"120\" width=\"20\" height=\"20\" fill=\"none\" stroke=\"#111\" stroke-width=\"2\"/>\r\n            </svg>`,\r\n            makeQuestion: () => {\r\n              const base = Math.floor(Math.random() * 8) + 6 // 6..13\r\n              const height = Math.floor(Math.random() * 6) + 4 // 4..9\r\n              return {\r\n                prompt: `A right triangle has base = ${base} cm and height = ${height} cm. What is its area?`,\r\n                unit: 'cm¬≤',\r\n                value: 0.5 * base * height,\r\n                placeholder: 'Area',\r\n                meta: { base, height },\r\n              }\r\n            },\r\n            questionDiagram: (meta) =>\r\n              `<svg viewBox=\"0 0 220 180\" width=\"240\" height=\"200\">\r\n              <polygon points=\"40,160 180,160 40,60\" fill=\"#fbe0e6\" stroke=\"#111\" stroke-width=\"3\"/>\r\n              <text x=\"110\" y=\"175\" text-anchor=\"middle\" font-size=\"14\" fill=\"#111\">base = ${meta.base}</text>\r\n              <text x=\"30\" y=\"110\" text-anchor=\"middle\" font-size=\"14\" fill=\"#111\" transform=\"rotate(-90,30,110)\">height = ${meta.height}</text>\r\n            </svg>`,\r\n          },\r\n          {\r\n            key: 'parallelogram',\r\n            name: 'Parallelogram',\r\n            description:\r\n              'Opposite sides are parallel and equal; slanted rectangle.',\r\n            perimeter: 'P = 2 √ó (a + b)',\r\n            area: 'A = base √ó height',\r\n            examples: [\r\n              'Leaning road sign post panel',\r\n              'Slanted picture frame',\r\n              'Certain kites',\r\n            ],\r\n            diagram: ({ b = 120, h = 80 } = {}) =>\r\n              `<svg viewBox=\"0 0 240 180\" width=\"240\" height=\"180\">\r\n              <polygon points=\"40,120 160,120 200,40 80,40\" fill=\"#f2e9ff\" stroke=\"#111\" stroke-width=\"3\"/>\r\n            </svg>`,\r\n            makeQuestion: () => {\r\n              const base = Math.floor(Math.random() * 8) + 6 // 6..13\r\n              const height = Math.floor(Math.random() * 7) + 4 // 4..10\r\n              return {\r\n                prompt: `A billboard panel is a parallelogram with base = ${base} m and height = ${height} m. What is its area?`,\r\n                unit: 'm¬≤',\r\n                value: base * height,\r\n                placeholder: 'Area',\r\n                meta: { base, height },\r\n              }\r\n            },\r\n            questionDiagram: (meta) =>\r\n              `<svg viewBox=\"0 0 260 200\" width=\"260\" height=\"200\">\r\n              <polygon points=\"60,140 200,140 240,60 100,60\" fill=\"#f2e9ff\" stroke=\"#111\" stroke-width=\"3\"/>\r\n              <text x=\"150\" y=\"160\" text-anchor=\"middle\" font-size=\"14\" fill=\"#111\">base = ${meta.base}</text>\r\n              <text x=\"50\" y=\"110\" text-anchor=\"middle\" font-size=\"14\" fill=\"#111\" transform=\"rotate(-90,50,110)\">height = ${meta.height}</text>\r\n            </svg>`,\r\n          },\r\n          {\r\n            key: 'circle',\r\n            name: 'Circle',\r\n            description:\r\n              'All points are the same distance (radius) from the center.',\r\n            perimeter: 'Circumference = 2 √ó œÄ √ó r',\r\n            area: 'A = œÄ √ó r¬≤',\r\n            examples: ['Clock face', 'Wheel', 'Coin'],\r\n            diagram: ({ r = 60 } = {}) =>\r\n              `<svg viewBox=\"0 0 200 200\" width=\"220\" height=\"220\">\r\n              <circle cx=\"100\" cy=\"100\" r=\"${r}\" fill=\"#fff8c6\" stroke=\"#111\" stroke-width=\"3\"/>\r\n              <line x1=\"100\" y1=\"100\" x2=\"${100 + r}\" y2=\"100\" stroke=\"#111\" stroke-width=\"2\"/>\r\n            </svg>`,\r\n            makeQuestion: () => {\r\n              const r = Math.floor(Math.random() * 6) + 3 // 3..8\r\n              const askArea = Math.random() < 0.6\r\n              if (askArea) {\r\n                const area = Math.round(3.14 * r * r) // nearest whole number\r\n                return {\r\n                  prompt: `A coin has radius r = ${r} cm. Using œÄ ‚âà 3.14, what is its area? (round to nearest whole)`,\r\n                  unit: 'cm¬≤',\r\n                  value: area,\r\n                  placeholder: 'Area (rounded)',\r\n                  meta: { r },\r\n                }\r\n              } else {\r\n                const C = Math.round(2 * 3.14 * r) // nearest whole\r\n                return {\r\n                  prompt: `A clock has radius r = ${r} cm. Using œÄ ‚âà 3.14, what is its circumference? (round to nearest whole)`,\r\n                  unit: 'cm',\r\n                  value: C,\r\n                  placeholder: 'Circumference (rounded)',\r\n                  meta: { r },\r\n                }\r\n              }\r\n            },\r\n            questionDiagram: (meta) =>\r\n              `<svg viewBox=\"0 0 240 220\" width=\"240\" height=\"220\">\r\n              <circle cx=\"120\" cy=\"110\" r=\"70\" fill=\"#fff8c6\" stroke=\"#111\" stroke-width=\"3\"/>\r\n              <line x1=\"120\" y1=\"110\" x2=\"${120 + 70}\" y2=\"110\" stroke=\"#111\" stroke-width=\"2\"/>\r\n              <text x=\"120\" y=\"105\" text-anchor=\"middle\" font-size=\"14\" fill=\"#111\">r = ${meta.r}</text>\r\n            </svg>`,\r\n          },\r\n        ],\r\n      }\r\n    },\r\n    computed: {\r\n      shape() {\r\n        return this.shapes[this.index]\r\n      },\r\n      shapeDiagram() {\r\n        // Base teaching diagram (not scaled by random meta)\r\n        return this.shape.diagram()\r\n      },\r\n      questionDiagram() {\r\n        // For question, render with the same numbers used in the prompt\r\n        if (this.shape.questionDiagram && this.question.meta) {\r\n          return this.shape.questionDiagram(this.question.meta)\r\n        }\r\n        return this.shape.diagram()\r\n      },\r\n    },\r\n    methods: {\r\n      goToQuestion() {\r\n        this.feedback = ''\r\n        this.isCorrect = false\r\n        this.answer = ''\r\n        this.question = this.shape.makeQuestion()\r\n        this.step = 'question'\r\n      },\r\n      tryAnother() {\r\n        // New randomized question for the same shape\r\n        this.feedback = ''\r\n        this.isCorrect = false\r\n        this.answer = ''\r\n        this.question = this.shape.makeQuestion()\r\n      },\r\n      checkAnswer() {\r\n        if (this.answer === '' || this.answer === null) return\r\n\r\n        const user = parseFloat(this.answer)\r\n        const correct = parseFloat(this.question.value)\r\n\r\n        // Allow small rounding tolerance for non-integers\r\n        const within = Math.abs(user - correct) <= 0.5\r\n\r\n        if (within) {\r\n          this.isCorrect = true\r\n          this.feedback = 'üéâ Correct! Great job!'\r\n        } else {\r\n          this.isCorrect = false\r\n          this.feedback = `‚ùå Not quite. Hint: review the formula above and check your units.`\r\n        }\r\n      },\r\n      nextShape() {\r\n        this.index++\r\n        this.answer = ''\r\n        this.feedback = ''\r\n        this.isCorrect = false\r\n\r\n        if (this.index >= this.shapes.length) {\r\n          this.step = 'done'\r\n        } else {\r\n          this.step = 'teach'\r\n        }\r\n      },\r\n      restart() {\r\n        this.index = 0\r\n        this.step = 'teach'\r\n        this.answer = ''\r\n        this.feedback = ''\r\n        this.isCorrect = false\r\n      },\r\n    },\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n  .geometry-explorer {\r\n    max-width: 720px;\r\n    margin: 0 auto;\r\n    padding: 16px;\r\n    color: #173f3a;\r\n  }\r\n\r\n  h2 {\r\n    text-align: center;\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  .card {\r\n    background: #ffffff;\r\n    border: 1px solid #cfeee7;\r\n    border-radius: 14px;\r\n    box-shadow: 0 6px 18px rgba(11, 187, 152, 0.08);\r\n    padding: 16px;\r\n  }\r\n\r\n  .diagram {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin: 12px 0 8px;\r\n  }\r\n\r\n  .explain .what {\r\n    margin: 8px 0;\r\n  }\r\n\r\n  .formulas p {\r\n    margin: 4px 0;\r\n  }\r\n\r\n  .examples ul {\r\n    margin: 6px 0 0 18px;\r\n  }\r\n\r\n  .answer-row {\r\n    display: inline-flex;\r\n    align-items: center;\r\n    gap: 8px;\r\n    margin: 8px 0 0;\r\n  }\r\n\r\n  .answer-input {\r\n    width: 180px;\r\n    padding: 8px 10px;\r\n    border: 1px solid #84e0cf;\r\n    border-radius: 8px;\r\n    font-size: 16px;\r\n    outline: none;\r\n  }\r\n\r\n  .answer-input:focus {\r\n    border-color: #0bbb98;\r\n    box-shadow: 0 0 0 3px rgba(11, 187, 152, 0.15);\r\n  }\r\n\r\n  .unit {\r\n    font-weight: 600;\r\n  }\r\n\r\n  .actions {\r\n    display: flex;\r\n    gap: 10px;\r\n    margin-top: 10px;\r\n  }\r\n\r\n  .btn {\r\n    border: 1px solid #0bbb98;\r\n    background: #fff;\r\n    color: #0bbb98;\r\n    padding: 8px 14px;\r\n    border-radius: 10px;\r\n    cursor: pointer;\r\n    font-weight: 700;\r\n    transition:\r\n      background 0.2s,\r\n      color 0.2s,\r\n      transform 0.06s;\r\n  }\r\n  .btn:hover {\r\n    background: #06977a;\r\n    color: #fff;\r\n  }\r\n  .btn:active {\r\n    transform: scale(0.98);\r\n  }\r\n\r\n  .btn.primary {\r\n    background: #0bbb98;\r\n    color: #fff;\r\n  }\r\n  .btn.primary:hover {\r\n    background: #06977a;\r\n  }\r\n\r\n  .btn.ghost {\r\n    background: #fff;\r\n    color: #0bbb98;\r\n  }\r\n\r\n  .feedback {\r\n    margin-top: 10px;\r\n    font-size: 16px;\r\n    font-weight: 700;\r\n  }\r\n  .feedback.ok {\r\n    color: #1f8f4e;\r\n  }\r\n  .feedback.bad {\r\n    color: #b32b2b;\r\n  }\r\n\r\n  .next-wrap {\r\n    margin-top: 12px;\r\n    text-align: center;\r\n  }\r\n</style>\r\n","import { render } from \"./GeometryExplorer.vue?vue&type=template&id=7d165ed2&scoped=true\"\nimport script from \"./GeometryExplorer.vue?vue&type=script&lang=js\"\nexport * from \"./GeometryExplorer.vue?vue&type=script&lang=js\"\n\nimport \"./GeometryExplorer.vue?vue&type=style&index=0&id=7d165ed2&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-7d165ed2\"]])\n\nexport default __exports__"],"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","$data","step","_hoisted_2","_toDisplayString","$options","shape","name","innerHTML","shapeDiagram","_hoisted_4","_hoisted_5","description","_hoisted_6","perimeter","area","_hoisted_7","_hoisted_8","_Fragment","_renderList","examples","ex","i","key","onClick","_cache","args","goToQuestion","_hoisted_9","questionDiagram","_hoisted_11","question","prompt","_hoisted_12","answer","$event","type","placeholder","onKeyup","_withKeys","checkAnswer","unit","_hoisted_14","_hoisted_15","tryAnother","feedback","_normalizeClass","isCorrect","_hoisted_16","nextShape","_hoisted_17","restart","data","index","value","meta","shapes","diagram","s","makeQuestion","side","Math","floor","random","askPerimeter","w","h","L","W","askArea","b","base","height","r","round","C","computed","this","methods","user","parseFloat","correct","within","abs","length","__exports__","render"],"sourceRoot":""}